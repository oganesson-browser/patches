diff --git a/extensions/browser/api/alarms/alarm_manager.cc b/extensions/browser/api/alarms/alarm_manager.cc
index 48d7f83388..ad6bbca92f 100644
--- a/extensions/browser/api/alarms/alarm_manager.cc
+++ b/extensions/browser/api/alarms/alarm_manager.cc
@@ -71,6 +71,7 @@ base::TimeDelta TimeDeltaFromDelay(double delay_in_minutes) {
                             base::Time::kMicrosecondsPerMinute);
 }
 
+// This is called only once on browser startup
 AlarmManager::AlarmList AlarmsFromValue(const std::string extension_id,
                                         bool is_unpacked,
                                         const base::Value::List& list) {
@@ -83,6 +84,12 @@ AlarmManager::AlarmList AlarmsFromValue(const std::string extension_id,
     Alarm alarm;
     if (alarm_value.is_dict() &&
         alarms::Alarm::Populate(alarm_value.GetDict(), *alarm.js_alarm)) {
+      // We do not store the non-persistent alarms to storage, but check
+      // here just to make sure
+      if (!alarm.js_alarm->persist_across_sessions.value_or(true)) {
+        LOG(WARNING) << "Extension had non-persistent alarms saved to storage.";
+        continue;
+      }
       absl::optional<base::TimeDelta> delta =
           base::ValueToTimeDelta(alarm_value.GetDict().Find(kAlarmGranularity));
       if (delta) {
@@ -102,9 +109,14 @@ AlarmManager::AlarmList AlarmsFromValue(const std::string extension_id,
   return alarms;
 }
 
+// This function is used by AlarmManager::WriteToStorage which
+// does not need to save alarms not persisted across browsing sessions
 base::Value::List AlarmsToValue(const AlarmManager::AlarmList& alarms) {
   base::Value::List list;
   for (const auto& item : alarms) {
+    // Skip alarms which need not to be persisted
+    if (!item.js_alarm->persist_across_sessions.value_or(true))
+      continue;
     base::Value::Dict alarm = item.js_alarm->ToValue();
     alarm.Set(kAlarmGranularity, base::TimeDeltaToValue(item.granularity));
     list.Append(std::move(alarm));
@@ -500,6 +512,9 @@ Alarm::Alarm(const std::string& name,
 
   // Check for repetition.
   js_alarm->period_in_minutes = create_info.period_in_minutes;
+
+  // Check for persistence across sessions, defaulting to true.
+  js_alarm->persist_across_sessions = create_info.persist_across_sessions.value_or(true);
 }
 
 Alarm::~Alarm() = default;
diff --git a/extensions/common/api/alarms.idl b/extensions/common/api/alarms.idl
index 3f4fad1425..be67957cbf 100644
--- a/extensions/common/api/alarms.idl
+++ b/extensions/common/api/alarms.idl
@@ -17,6 +17,9 @@ namespace alarms {
     // If not null, the alarm is a repeating alarm and will fire again in
     // <var>periodInMinutes</var> minutes.
     double? periodInMinutes;
+
+    // If false, alarm will be cleared after browsing session end
+    boolean? persistAcrossSessions;
   };
 
   // TODO(mpcomplete): rename to CreateInfo when http://crbug.com/123073 is
@@ -38,6 +41,10 @@ namespace alarms {
     //
     // <!-- TODO: need minimum=0 -->
     double? periodInMinutes;
+
+    // Whether alarm should persist across browsing sessions
+    // Defaults to true
+    boolean? persistAcrossSessions;
   };
 
   callback VoidCallback = void ();
